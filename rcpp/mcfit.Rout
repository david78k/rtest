
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #sampler for univariate markov chains
> # markovchainSequence<-function(n,markovchain, t0=sample(markovchain@states,1),include.t0=FALSE)
> # {
> #   if(!(t0%in%markovchain@states)) stop("Error! Initial state not defined")
> #   chain=character()
> #   state=t0
> #   for(i in 1:n) {
> #     rowProbs<-markovchain@transitionMatrix[which(markovchain@states==state),]
> #     outstate<-sample(size=1, x=markovchain@states, prob=rowProbs)
> #     chain=c(chain, outstate)
> #     state=outstate
> #   }
> #   if(include.t0) out<-c(t0, chain) else out<-chain
> #   return(out)
> # }
> 
> library(markovchain)

Attaching package: ‘markovchain’

The following objects are masked _by_ ‘.GlobalEnv’:

    createSequenceMatrix, markovchainListFit

> require(matlab)
Loading required package: matlab

Attaching package: ‘matlab’

The following object is masked from ‘package:stats’:

    reshape

The following objects are masked from ‘package:utils’:

    find, fix

The following object is masked from ‘package:base’:

    sum

> 
> #core function to get sequence matrix
> 
> createSequenceMatrix<-function(stringchar, toRowProbs=FALSE,sanitize=TRUE)
+ {
+   elements <- sort(unique(stringchar))
+   sizeMatr <- length(elements)
+   freqMatrix <- zeros(sizeMatr)
+   rownames(freqMatrix) <- elements
+   colnames(freqMatrix) <- elements
+   for(i in 1:(length(stringchar)-1))
+   {
+     posFrom <- which(rownames(freqMatrix)==stringchar[i])
+     posTo <- which(rownames(freqMatrix)==stringchar[i+1])
+     freqMatrix[posFrom,posTo]=freqMatrix[posFrom,posTo]+1
+   }
+   #sanitizing if any row in the matrix sums to zero by posing the corresponding diagonal equal to 1/dim
+   if(sanitize==TRUE)
+   {
+           if(any(rowSums(freqMatrix)==0))
+           {
+                   indexesToBeSanitized<-which(rowSums(freqMatrix)==0)
+                   for(i in indexesToBeSanitized) {
+                           for(j in 1:sizeMatr) freqMatrix[i,j]<-1/sizeMatr
+                   }
+           }
+   }
+   if(toRowProbs==TRUE)
+   {
+     freqMatrix<-freqMatrix/rowSums(freqMatrix)
+   }
+   return(freqMatrix)
+ }
> 
> #functon to fit a Markov chain by MLE
> 
> .mcFitMle<-function(stringchar,byrow)
+ {
+   initialMatr<-createSequenceMatrix(stringchar=stringchar,toRowProbs=TRUE)
+   outMc<-new("markovchain", transitionMatrix=initialMatr,name="MLE Fit")
+   if(byrow==FALSE) outMc<-t(outMc)
+   out<-list(estimate=outMc)
+   return(out)
+ }
> 
> 
> #function to fit a DTMC with Laplacian Smoother
> 
> .mcFitLaplacianSmooth<-function(stringchar,byrow,laplacian=0.01)
+ {
+ 	origNum<-createSequenceMatrix(stringchar=stringchar,toRowProbs=FALSE)
+ 	sumOfRow<-rowSums(origNum)
+ 	origDen<-matrix(rep(sumOfRow,length(sumOfRow)),byrow = FALSE,ncol=length(sumOfRow))
+ 	newNum<-origNum+laplacian
+ 	newSumOfRow<-rowSums(newNum)
+ 	newDen<-matrix(rep(newSumOfRow,length(newSumOfRow)),byrow = FALSE,ncol=length(newSumOfRow))
+ 	transMatr<-newNum/newDen
+ 	outMc<-new("markovchain", transitionMatrix=transMatr,name="Laplacian Smooth Fit")
+ 	if(byrow==FALSE) outMc<-t(outMc)
+ 	out<-list(estimate=outMc)
+ 	return(out)
+ }
> 
> 
> #example
> 
> #data=markovchainSequence(10000,markovA,t0="a")
> #ciao<-markovchainFit(data=data)
> 
> 
> #given a sting of characters, returns the associate one step transition matrix
> .bootstrapCharacterSequences<-function(stringchar, n, size=length(stringchar))
+ {
+   contingencyMatrix<-createSequenceMatrix(stringchar=stringchar)
+   samples<-list()
+   itemset<-rownames(contingencyMatrix)
+   for(i in 1:n) #cicle to fill the samples
+   {
+     charseq<-character()
+     char<-sample(x=itemset,size=1)
+     charseq<-c(charseq,char)
+     for(j in 2:size) #cicle to define the element in a list
+     {
+       probsVector<-contingencyMatrix[which(rownames(contingencyMatrix)==char),]
+       char<-sample(x=itemset,size=1, replace=TRUE,prob=probsVector)
+       charseq<-c(charseq,char)
+     }
+     samples[[length(samples)+1]]<-charseq #increase the list
+   }
+   return(samples)
+ }
> 
> 
> .fromBoot2Estimate<-function(listMatr)
+ {
+   sampleSize<-length(listMatr)
+   matrDim<-nrow(listMatr[[1]])
+   #create the estimate output
+   matrMean<-zeros(matrDim)
+   matrSd<-zeros(matrDim)
+   #create the sample output
+   for(i in 1:matrDim) #move by row
+   {
+     for(j in 1:matrDim) #move by cols
+     {
+       probsEstimated<-numeric()
+       #fill the probs
+       for(k in 1:sampleSize) probsEstimated<-c(probsEstimated,listMatr[[k]][i,j])
+       muCell<-mean(probsEstimated)
+       sdCell<-sd(probsEstimated)
+       matrMean[i,j]<-muCell
+       matrSd[i,j]<-sdCell
+     }
+   }
+ 	out<-list(estMu=matrMean, estSigma=matrSd)
+     return(out)
+ }
> 
> 
> .mcFitBootStrap<-function(data, nboot=10,byrow=TRUE, parallel=FALSE)
+ {
+   #create the list of bootstrap sequence sample
+ 	theList<-.bootstrapCharacterSequences(stringchar=data, n=nboot)
+ 	if(!parallel)
+ 		#convert the list in a probability matrix
+ 		pmsBootStrapped<-lapply(X=theList, FUN=createSequenceMatrix, toRowProbs=TRUE,sanitize=TRUE)
+ 		 else {
+ 		#require(parallel)
+ 		type <- if(exists("mcfork", mode = "function")) "FORK" else "PSOCK"
+ 		cores <- getOption("mc.cores", detectCores())
+ 		cl <- makeCluster(cores, type = type)
+ 			clusterExport(cl, varlist = c("createSequenceMatrix","zeros"))
+ 			pmsBootStrapped<-parLapply(cl=cl, X=theList, fun="createSequenceMatrix", toRowProbs=TRUE,sanitize=TRUE)
+ 		stopCluster(cl)
+ 	}
+  
+   estimateList<-.fromBoot2Estimate(listMatr=pmsBootStrapped)
+   #from raw to estimate
+   temp<-estimateList$estMu
+   transMatr<-sweep(temp, 1, rowSums(temp), FUN="/")
+   estimate<-new("markovchain",transitionMatrix=transMatr, byrow=byrow, name="BootStrap Estimate")
+   out<-list(estimate=estimate, standardError=estimateList$estSigma,bootStrapSamples=pmsBootStrapped)
+   return(out)
+ }
> 
> ###############################################
> #special function for matrices and data.frames#
> ###############################################
> 
> #function that return a Markov Chain from a given matrix of observations
> 
> .matr2Mc<-function(matrData,laplacian=0) {
+   #find unique values scanning the matrix
+   nCols<-ncol(matrData)
+   uniqueVals<-character()
+   for(i in 1:nCols) uniqueVals<-union(uniqueVals,unique(as.character(matrData[,i])))
+   uniqueVals<-sort(uniqueVals)
+   #create a contingency matrix
+   contingencyMatrix<-matrix(rep(0,length(uniqueVals)^2),ncol=length(uniqueVals))
+   rownames(contingencyMatrix)<-colnames(contingencyMatrix)<-uniqueVals
+   #fill the contingency matrix
+   for(i in 1:nrow(matrData))
+   {
+     for( j in 2:nCols)
+     {
+       stateBegin<-as.character(matrData[i,j-1]);whichRow<-which(uniqueVals==stateBegin)
+       stateEnd<-as.character(matrData[i,j]);whichCols<-which(uniqueVals==stateEnd)
+       contingencyMatrix[whichRow,whichCols]<-contingencyMatrix[whichRow,whichCols]+1
+     }
+   }
+   #add laplacian correction if needed
+   contingencyMatrix<-contingencyMatrix+laplacian
+   #get a transition matrix and a DTMC
+   transitionMatrix<-contingencyMatrix/rowSums(contingencyMatrix)
+   outMc<-new("markovchain",transitionMatrix=transitionMatrix)
+  
+   return(outMc)
+ }
> 
> 
> #fit
> 
> #markovchainFit<-function(data,method="mle", byrow=TRUE,nboot=10,laplacian=0, name, parallel=FALSE)
> mcfit<-function(data,method="mle", byrow=TRUE,nboot=10,laplacian=0, name, parallel=FALSE)
+ {
+   if(class(data) %in% c("data.frame","matrix")) {
+     #if data is a data.frame forced to matrix
+     if(is.data.frame(data)) data<-as.matrix(data)
+     #byrow assumes distinct observations (trajectiories) are per row
+     #otherwise transpose
+     if(!byrow) data<-t(data)
+     outMc<-.matr2Mc(matrData = data,laplacian=laplacian)
+     out<-list(estimate=outMc)
+   } else {
+   #fits other methods
+   if(method=="mle") out<-.mcFitMle(stringchar=data,byrow=byrow)
+   if(method=="bootstrap") out<-.mcFitBootStrap(data=data,byrow=byrow,nboot=nboot, parallel=parallel)
+   if(method=="laplace") out<-.mcFitLaplacianSmooth(stringchar=data,byrow=byrow,laplacian=laplacian)
+   }
+   if(!missing(name)) out$estimate@name<-name
+   return(out)
+ }
> 
> 
> 
> #' Fit a markovchainList
> #' 
> #' @param data Either a matrix or a data.frame object.
> #' @param laplacian Laplacian correction (default 0).
> #' @param byrow Indicates whether distinc stochastic processes trajectiories are shown in distinct rows.
> #' @param name Optional name.
> #' 
> #' @return A list containing two slots:
> #' estimate (the estimate)
> #' name
> #' 
> #' @examples
> #' 
> #' #using holson dataset
> #' data(holson)
> #' #fitting a single markovchain
> #' singleMc<-markovchainFit(data=holson[,2:12])
> #' #fitting a markovchainList
> #' mclistFit<-markovchainListFit(data=holson[,2:12],name="holsonMcList")
> 
> markovchainListFit<-function(data,byrow=TRUE, laplacian=0, name) {
+   if (!(class(data) %in% c("data.frame","matrix"))) stop("Error: data must be either a matrix or a data.frame")
+   if(is.data.frame(data)) data<-as.matrix(data)
+   #byrow assumes distinct observations (trajectiories) are per row
+   #otherwise transpose
+   if(!byrow) data<-t(data)
+   nCols<-ncol(data)
+   #allocate a the list of markovchain
+   markovchains<-list(nCols-1)
+   #fit by cols
+   for(i in 2:(nCols)) {
+ 
+     estMc<-.matr2Mc(matrData = data[,c(i-1,i)],laplacian = laplacian)
+     if(!is.null(colnames(data))) estMc@name<-colnames(data)[i-1]
+     markovchains[i-1]<-estMc
+   }
+   #return the fitted list
+   outMcList<-new("markovchainList",markovchains=markovchains)
+   out<-list(estimate=outMcList)
+   if(!missing(name)) out$estimate@name<-name
+   return(out)
+ }
> 
> library(Rcpp)
> sourceCpp("mcfit.cpp")
mcfit.cpp: In function ‘Rcpp::NumericMatrix markovchainFit_cpp(Rcpp::CharacterVector, Rcpp::String, bool, int, double, Rcpp::String, bool)’:
mcfit.cpp:299:11: error: ambiguous overload for ‘operator<<’ (operand types are ‘Rcpp::Rostream<true>’ and ‘Rcpp::AttributeProxyPolicy<Rcpp::Vector<16> >::AttributeProxy’)
     Rcout << data.attr("class") << endl;
           ^
mcfit.cpp:299:11: note: candidates are:
In file included from /usr/include/c++/4.8/iterator:64:0,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/ostream:108:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT, _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(__ostream_type& (*__pf)(__ostream_type&))
       ^
/usr/include/c++/4.8/ostream:117:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ios_type& (*)(std::basic_ostream<_CharT, _Traits>::__ios_type&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>; std::basic_ostream<_CharT, _Traits>::__ios_type = std::basic_ios<char>]
       operator<<(__ios_type& (*__pf)(__ios_type&))
       ^
/usr/include/c++/4.8/ostream:127:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(std::ios_base& (*)(std::ios_base&)) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(ios_base& (*__pf) (ios_base&))
       ^
/usr/include/c++/4.8/ostream:166:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long __n)
       ^
/usr/include/c++/4.8/ostream:170:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long __n)
       ^
/usr/include/c++/4.8/ostream:174:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(bool) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(bool __n)
       ^
In file included from /usr/include/c++/4.8/ostream:609:0,
                 from /usr/include/c++/4.8/iterator:64,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/bits/ostream.tcc:91:5: note: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(short int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
In file included from /usr/include/c++/4.8/iterator:64:0,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/ostream:181:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(short unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned short __n)
       ^
In file included from /usr/include/c++/4.8/ostream:609:0,
                 from /usr/include/c++/4.8/iterator:64,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/bits/ostream.tcc:105:5: note: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(int) [with _CharT = char; _Traits = std::char_traits<char>]
     basic_ostream<_CharT, _Traits>::
     ^
In file included from /usr/include/c++/4.8/iterator:64:0,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/ostream:192:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned int __n)
       ^
/usr/include/c++/4.8/ostream:201:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long long __n)
       ^
/usr/include/c++/4.8/ostream:205:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long long unsigned int) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(unsigned long long __n)
       ^
/usr/include/c++/4.8/ostream:220:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(double __f)
       ^
/usr/include/c++/4.8/ostream:224:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(float) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(float __f)
       ^
/usr/include/c++/4.8/ostream:232:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(long double) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(long double __f)
       ^
/usr/include/c++/4.8/ostream:245:7: note: std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT, _Traits>::operator<<(const void*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]
       operator<<(const void* __p)
       ^
In file included from /usr/include/c++/4.8/ostream:609:0,
                 from /usr/include/c++/4.8/iterator:64,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/bits/ostream.tcc:119:5: note: std::basic_ostream<_CharT, _Traits>& std::basic_ostream<_CharT, _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__streambuf_type*) [with _CharT = char; _Traits = std::char_traits<char>; std::basic_ostream<_CharT, _Traits>::__streambuf_type = std::basic_streambuf<char>]
     basic_ostream<_CharT, _Traits>::
     ^
In file included from /usr/include/c++/4.8/iterator:64:0,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/ostream:476:5: note: std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, char) [with _CharT = char; _Traits = std::char_traits<char>]
     operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
     ^
/usr/include/c++/4.8/ostream:482:5: note: std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, char) [with _Traits = std::char_traits<char>]
     operator<<(basic_ostream<char, _Traits>& __out, char __c)
     ^
/usr/include/c++/4.8/ostream:488:5: note: std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, signed char) [with _Traits = std::char_traits<char>]
     operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
     ^
/usr/include/c++/4.8/ostream:493:5: note: std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, unsigned char) [with _Traits = std::char_traits<char>]
     operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
     ^
In file included from /usr/include/c++/4.8/ostream:609:0,
                 from /usr/include/c++/4.8/iterator:64,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/bits/ostream.tcc:321:5: note: std::basic_ostream<_CharT, _Traits>& std::operator<<(std::basic_ostream<_CharT, _Traits>&, const char*) [with _CharT = char; _Traits = std::char_traits<char>]
     operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
     ^
In file included from /usr/include/c++/4.8/iterator:64:0,
                 from /usr/local/lib/R/site-library/Rcpp/include/RcppCommon.h:54,
                 from /usr/local/lib/R/site-library/Rcpp/include/Rcpp.h:27,
                 from mcfit.cpp:1:
/usr/include/c++/4.8/ostream:530:5: note: std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const char*) [with _Traits = std::char_traits<char>]
     operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
     ^
/usr/include/c++/4.8/ostream:543:5: note: std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const signed char*) [with _Traits = std::char_traits<char>]
     operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
     ^
/usr/include/c++/4.8/ostream:548:5: note: std::basic_ostream<char, _Traits>& std::operator<<(std::basic_ostream<char, _Traits>&, const unsigned char*) [with _Traits = std::char_traits<char>]
     operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
     ^
make: *** [mcfit.o] Error 1
g++ -I/usr/share/R/include -DNDEBUG    -I"/usr/local/lib/R/site-library/Rcpp/include" -I"/mnt/github/rtest/rcpp"    -fpic  -O3 -pipe  -g  -c mcfit.cpp -o mcfit.o
Error in sourceCpp("mcfit.cpp") : 
  Error 1 occurred building shared library.
Execution halted
